람다로 표현된 메서드
C#에서 메서드는 람다 식으로 다시 표현될 수 있습니다.

특히 메서드가 한줄에서 두줄 정도의 문장으로 구성된 경우, 동일한 작업을 하는 코드를 매우 간결하게 표현할 수 있다는 장점이 있습니다.

다음과 같은 코드가 있다고 가정해 봅시다.

private int health = 0;
 
public void RestoreHealth(int amount) {
	health += amount;
}
 
public bool IsDead() {
	return (health <= 0);
}
위 코드에서 RestoreHealth() 메서드는 입력 받은 amount 값 만큼 체력 health를 증가시킵니다.

IsDead() 메서드는 체력 heath가 0보다 작거나 같다면, true를 반환합니다.

RestoreHealth()와 IsDead() 메서드 모두 람다 식을 통해 다음과 같이 다시 표현할 수 있습니다.

private int health = 0;
public void RestoreHealth(int amount) => health += amount;
public bool IsDead() => (health <= 0);
읽는 법

RestoreHealth(int amount)는 health += amount 으로 대응된다

IsDead()는 heath <= 0 으로 대응된다.

물론 표현 방법만 달라졌을뿐, 처리 방식은 100% 동일합니다.

변수처럼 동작하는 메서드인 프로퍼티도 람다 식으로 표현할 수 있습니다.

다음과 같은 프로퍼티가 존재한다고 가정해 봅시다.

private int health = 0;
 
public int Health {
	get { return health; }
	set { health = value; }
}
 
public bool IsDead {
	get { return (health <= 0); }
}
프로퍼티 Health의 get, set 접근자는 위에 있는 int health 변수를 한번 감싸는 역할을 합니다. IsDead 프로퍼티는 체력이 0보다 작다면 true, 크다면 false를 반환합니다.

위 프로퍼티들을 다음과 같이 람다 식으로 다시 표현할 수 있습니다.

private int health = 0;
 
public int Health {
	get => health;
	set => health = value;
}
 
public bool IsDead => (health <= 0);
여기서 주목할 점은 IsDead 처럼 get만 존재하는 프로퍼티의 경우 극단적으로 짧게 같은 코드를 표현할 수 있다는 것입니다.

메서드나 프로퍼티를 람다 식으로 표현하는 것은 어디까지나 개인적인 선택입니다.

단, 다음 상황에서는 클린 코드를 구현하기 위해 람다 식을 적극 활용하는 것을 추천합니다.

한 두줄로 이루어진 메서드 또는 프로퍼티

특히 한줄로 이루어진 get 프로퍼티가 존재하는 경우